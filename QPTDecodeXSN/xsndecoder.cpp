#include "xsndecoder.h"



XsnDecoder::XsnDecoder(QObject *parent) : QObject(parent)
{

    // create lookUpTable
    // define the basemap
    //float r[256] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00588235294117645f, 0.02156862745098032f, 0.03725490196078418f, 0.05294117647058827f, 0.06862745098039214f, 0.084313725490196f, 0.1000000000000001f, 0.115686274509804f, 0.1313725490196078f, 0.1470588235294117f, 0.1627450980392156f, 0.1784313725490196f, 0.1941176470588235f, 0.2098039215686274f, 0.2254901960784315f, 0.2411764705882353f, 0.2568627450980392f, 0.2725490196078431f, 0.2882352941176469f, 0.303921568627451f, 0.3196078431372549f, 0.3352941176470587f, 0.3509803921568628f, 0.3666666666666667f, 0.3823529411764706f, 0.3980392156862744f, 0.4137254901960783f, 0.4294117647058824f, 0.4450980392156862f, 0.4607843137254901f, 0.4764705882352942f, 0.4921568627450981f, 0.5078431372549019f, 0.5235294117647058f, 0.5392156862745097f, 0.5549019607843135f, 0.5705882352941174f, 0.5862745098039217f, 0.6019607843137256f, 0.6176470588235294f, 0.6333333333333333f, 0.6490196078431372f, 0.664705882352941f, 0.6803921568627449f, 0.6960784313725492f, 0.7117647058823531f, 0.7274509803921569f, 0.7431372549019608f, 0.7588235294117647f, 0.7745098039215685f, 0.7901960784313724f, 0.8058823529411763f, 0.8215686274509801f, 0.8372549019607844f, 0.8529411764705883f, 0.8686274509803922f, 0.884313725490196f, 0.8999999999999999f, 0.9156862745098038f, 0.9313725490196076f, 0.947058823529412f, 0.9627450980392158f, 0.9784313725490197f, 0.9941176470588236f, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9862745098039216f, 0.9705882352941178f, 0.9549019607843139f, 0.93921568627451f, 0.9235294117647062f, 0.9078431372549018f, 0.892156862745098f, 0.8764705882352941f, 0.8607843137254902f, 0.8450980392156864f, 0.8294117647058825f, 0.8137254901960786f, 0.7980392156862743f, 0.7823529411764705f, 0.7666666666666666f, 0.7509803921568627f, 0.7352941176470589f, 0.719607843137255f, 0.7039215686274511f, 0.6882352941176473f, 0.6725490196078434f, 0.6568627450980391f, 0.6411764705882352f, 0.6254901960784314f, 0.6098039215686275f, 0.5941176470588236f, 0.5784313725490198f, 0.5627450980392159f, 0.5470588235294116f, 0.5313725490196077f, 0.5156862745098039f, 0.5f };
    //float g[256] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001960784313725483f, 0.01764705882352935f, 0.03333333333333333f, 0.0490196078431373f, 0.06470588235294117f, 0.08039215686274503f, 0.09607843137254901f, 0.111764705882353f, 0.1274509803921569f, 0.1431372549019607f, 0.1588235294117647f, 0.1745098039215687f, 0.1901960784313725f, 0.2058823529411764f, 0.2215686274509804f, 0.2372549019607844f, 0.2529411764705882f, 0.2686274509803921f, 0.2843137254901961f, 0.3f, 0.3156862745098039f, 0.3313725490196078f, 0.3470588235294118f, 0.3627450980392157f, 0.3784313725490196f, 0.3941176470588235f, 0.4098039215686274f, 0.4254901960784314f, 0.4411764705882353f, 0.4568627450980391f, 0.4725490196078431f, 0.4882352941176471f, 0.503921568627451f, 0.5196078431372548f, 0.5352941176470587f, 0.5509803921568628f, 0.5666666666666667f, 0.5823529411764705f, 0.5980392156862746f, 0.6137254901960785f, 0.6294117647058823f, 0.6450980392156862f, 0.6607843137254901f, 0.6764705882352942f, 0.692156862745098f, 0.7078431372549019f, 0.723529411764706f, 0.7392156862745098f, 0.7549019607843137f, 0.7705882352941176f, 0.7862745098039214f, 0.8019607843137255f, 0.8176470588235294f, 0.8333333333333333f, 0.8490196078431373f, 0.8647058823529412f, 0.8803921568627451f, 0.8960784313725489f, 0.9117647058823528f, 0.9274509803921569f, 0.9431372549019608f, 0.9588235294117646f, 0.9745098039215687f, 0.9901960784313726f, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9901960784313726f, 0.9745098039215687f, 0.9588235294117649f, 0.943137254901961f, 0.9274509803921571f, 0.9117647058823528f, 0.8960784313725489f, 0.8803921568627451f, 0.8647058823529412f, 0.8490196078431373f, 0.8333333333333335f, 0.8176470588235296f, 0.8019607843137253f, 0.7862745098039214f, 0.7705882352941176f, 0.7549019607843137f, 0.7392156862745098f, 0.723529411764706f, 0.7078431372549021f, 0.6921568627450982f, 0.6764705882352944f, 0.6607843137254901f, 0.6450980392156862f, 0.6294117647058823f, 0.6137254901960785f, 0.5980392156862746f, 0.5823529411764707f, 0.5666666666666669f, 0.5509803921568626f, 0.5352941176470587f, 0.5196078431372548f, 0.503921568627451f, 0.4882352941176471f, 0.4725490196078432f, 0.4568627450980394f, 0.4411764705882355f, 0.4254901960784316f, 0.4098039215686273f, 0.3941176470588235f, 0.3784313725490196f, 0.3627450980392157f, 0.3470588235294119f, 0.331372549019608f, 0.3156862745098041f, 0.2999999999999998f, 0.284313725490196f, 0.2686274509803921f, 0.2529411764705882f, 0.2372549019607844f, 0.2215686274509805f, 0.2058823529411766f, 0.1901960784313728f, 0.1745098039215689f, 0.1588235294117646f, 0.1431372549019607f, 0.1274509803921569f, 0.111764705882353f, 0.09607843137254912f, 0.08039215686274526f, 0.06470588235294139f, 0.04901960784313708f, 0.03333333333333321f, 0.01764705882352935f, 0.001960784313725483f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    //float b[256] = { 1, 0.5156862745098039f, 0.5313725490196078f, 0.5470588235294118f, 0.5627450980392157f, 0.5784313725490196f, 0.5941176470588235f, 0.6098039215686275f, 0.6254901960784314f, 0.6411764705882352f, 0.6568627450980392f, 0.6725490196078432f, 0.6882352941176471f, 0.7039215686274509f, 0.7196078431372549f, 0.7352941176470589f, 0.7509803921568627f, 0.7666666666666666f, 0.7823529411764706f, 0.7980392156862746f, 0.8137254901960784f, 0.8294117647058823f, 0.8450980392156863f, 0.8607843137254902f, 0.8764705882352941f, 0.892156862745098f, 0.907843137254902f, 0.9235294117647059f, 0.9392156862745098f, 0.9549019607843137f, 0.9705882352941176f, 0.9862745098039216f, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9941176470588236f, 0.9784313725490197f, 0.9627450980392158f, 0.9470588235294117f, 0.9313725490196079f, 0.915686274509804f, 0.8999999999999999f, 0.884313725490196f, 0.8686274509803922f, 0.8529411764705883f, 0.8372549019607844f, 0.8215686274509804f, 0.8058823529411765f, 0.7901960784313726f, 0.7745098039215685f, 0.7588235294117647f, 0.7431372549019608f, 0.7274509803921569f, 0.7117647058823531f, 0.696078431372549f, 0.6803921568627451f, 0.6647058823529413f, 0.6490196078431372f, 0.6333333333333333f, 0.6176470588235294f, 0.6019607843137256f, 0.5862745098039217f, 0.5705882352941176f, 0.5549019607843138f, 0.5392156862745099f, 0.5235294117647058f, 0.5078431372549019f, 0.4921568627450981f, 0.4764705882352942f, 0.4607843137254903f, 0.4450980392156865f, 0.4294117647058826f, 0.4137254901960783f, 0.3980392156862744f, 0.3823529411764706f, 0.3666666666666667f, 0.3509803921568628f, 0.335294117647059f, 0.3196078431372551f, 0.3039215686274508f, 0.2882352941176469f, 0.2725490196078431f, 0.2568627450980392f, 0.2411764705882353f, 0.2254901960784315f, 0.2098039215686276f, 0.1941176470588237f, 0.1784313725490199f, 0.1627450980392156f, 0.1470588235294117f, 0.1313725490196078f, 0.115686274509804f, 0.1000000000000001f, 0.08431372549019622f, 0.06862745098039236f, 0.05294117647058805f, 0.03725490196078418f, 0.02156862745098032f, 0.00588235294117645f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    float r[256] = { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00588235294117645f, 0.02156862745098032f, 0.03725490196078418f, 0.05294117647058827f, 0.06862745098039214f, 0.084313725490196f, 0.1000000000000001f, 0.115686274509804f, 0.1313725490196078f, 0.1470588235294117f, 0.1627450980392156f, 0.1784313725490196f, 0.1941176470588235f, 0.2098039215686274f, 0.2254901960784315f, 0.2411764705882353f, 0.2568627450980392f, 0.2725490196078431f, 0.2882352941176469f, 0.303921568627451f, 0.3196078431372549f, 0.3352941176470587f, 0.3509803921568628f, 0.3666666666666667f, 0.3823529411764706f, 0.3980392156862744f, 0.4137254901960783f, 0.4294117647058824f, 0.4450980392156862f, 0.4607843137254901f, 0.4764705882352942f, 0.4921568627450981f, 0.5078431372549019f, 0.5235294117647058f, 0.5392156862745097f, 0.5549019607843135f, 0.5705882352941174f, 0.5862745098039217f, 0.6019607843137256f, 0.6176470588235294f, 0.6333333333333333f, 0.6490196078431372f, 0.664705882352941f, 0.6803921568627449f, 0.6960784313725492f, 0.7117647058823531f, 0.7274509803921569f, 0.7431372549019608f, 0.7588235294117647f, 0.7745098039215685f, 0.7901960784313724f, 0.8058823529411763f, 0.8215686274509801f, 0.8372549019607844f, 0.8529411764705883f, 0.8686274509803922f, 0.884313725490196f, 0.8999999999999999f, 0.9156862745098038f, 0.9313725490196076f, 0.947058823529412f, 0.9627450980392158f, 0.9784313725490197f, 0.9941176470588236f, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9862745098039216f, 0.9705882352941178f, 0.9549019607843139f, 0.93921568627451f, 0.9235294117647062f, 0.9078431372549018f, 0.892156862745098f, 0.8764705882352941f, 0.8607843137254902f, 0.8450980392156864f, 0.8294117647058825f, 0.8137254901960786f, 0.7980392156862743f, 0.7823529411764705f, 0.7666666666666666f, 0.7509803921568627f, 0.7352941176470589f, 0.719607843137255f, 0.7039215686274511f, 0.6882352941176473f, 0.6725490196078434f, 0.6568627450980391f, 0.6411764705882352f, 0.6254901960784314f, 0.6098039215686275f, 0.5941176470588236f, 0.5784313725490198f, 0.5627450980392159f, 0.5470588235294116f, 0.5313725490196077f, 0.5156862745098039f, 0.5f };
    float g[256] = { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.001960784313725483f, 0.01764705882352935f, 0.03333333333333333f, 0.0490196078431373f, 0.06470588235294117f, 0.08039215686274503f, 0.09607843137254901f, 0.111764705882353f, 0.1274509803921569f, 0.1431372549019607f, 0.1588235294117647f, 0.1745098039215687f, 0.1901960784313725f, 0.2058823529411764f, 0.2215686274509804f, 0.2372549019607844f, 0.2529411764705882f, 0.2686274509803921f, 0.2843137254901961f, 0.3f, 0.3156862745098039f, 0.3313725490196078f, 0.3470588235294118f, 0.3627450980392157f, 0.3784313725490196f, 0.3941176470588235f, 0.4098039215686274f, 0.4254901960784314f, 0.4411764705882353f, 0.4568627450980391f, 0.4725490196078431f, 0.4882352941176471f, 0.503921568627451f, 0.5196078431372548f, 0.5352941176470587f, 0.5509803921568628f, 0.5666666666666667f, 0.5823529411764705f, 0.5980392156862746f, 0.6137254901960785f, 0.6294117647058823f, 0.6450980392156862f, 0.6607843137254901f, 0.6764705882352942f, 0.692156862745098f, 0.7078431372549019f, 0.723529411764706f, 0.7392156862745098f, 0.7549019607843137f, 0.7705882352941176f, 0.7862745098039214f, 0.8019607843137255f, 0.8176470588235294f, 0.8333333333333333f, 0.8490196078431373f, 0.8647058823529412f, 0.8803921568627451f, 0.8960784313725489f, 0.9117647058823528f, 0.9274509803921569f, 0.9431372549019608f, 0.9588235294117646f, 0.9745098039215687f, 0.9901960784313726f, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9901960784313726f, 0.9745098039215687f, 0.9588235294117649f, 0.943137254901961f, 0.9274509803921571f, 0.9117647058823528f, 0.8960784313725489f, 0.8803921568627451f, 0.8647058823529412f, 0.8490196078431373f, 0.8333333333333335f, 0.8176470588235296f, 0.8019607843137253f, 0.7862745098039214f, 0.7705882352941176f, 0.7549019607843137f, 0.7392156862745098f, 0.723529411764706f, 0.7078431372549021f, 0.6921568627450982f, 0.6764705882352944f, 0.6607843137254901f, 0.6450980392156862f, 0.6294117647058823f, 0.6137254901960785f, 0.5980392156862746f, 0.5823529411764707f, 0.5666666666666669f, 0.5509803921568626f, 0.5352941176470587f, 0.5196078431372548f, 0.503921568627451f, 0.4882352941176471f, 0.4725490196078432f, 0.4568627450980394f, 0.4411764705882355f, 0.4254901960784316f, 0.4098039215686273f, 0.3941176470588235f, 0.3784313725490196f, 0.3627450980392157f, 0.3470588235294119f, 0.331372549019608f, 0.3156862745098041f, 0.2999999999999998f, 0.284313725490196f, 0.2686274509803921f, 0.2529411764705882f, 0.2372549019607844f, 0.2215686274509805f, 0.2058823529411766f, 0.1901960784313728f, 0.1745098039215689f, 0.1588235294117646f, 0.1431372549019607f, 0.1274509803921569f, 0.111764705882353f, 0.09607843137254912f, 0.08039215686274526f, 0.06470588235294139f, 0.04901960784313708f, 0.03333333333333321f, 0.01764705882352935f, 0.001960784313725483f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    float b[256] = { 1, 1, 1, 1, 0.5627450980392157f, 0.5784313725490196f, 0.5941176470588235f, 0.6098039215686275f, 0.6254901960784314f, 0.6411764705882352f, 0.6568627450980392f, 0.6725490196078432f, 0.6882352941176471f, 0.7039215686274509f, 0.7196078431372549f, 0.7352941176470589f, 0.7509803921568627f, 0.7666666666666666f, 0.7823529411764706f, 0.7980392156862746f, 0.8137254901960784f, 0.8294117647058823f, 0.8450980392156863f, 0.8607843137254902f, 0.8764705882352941f, 0.892156862745098f, 0.907843137254902f, 0.9235294117647059f, 0.9392156862745098f, 0.9549019607843137f, 0.9705882352941176f, 0.9862745098039216f, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9941176470588236f, 0.9784313725490197f, 0.9627450980392158f, 0.9470588235294117f, 0.9313725490196079f, 0.915686274509804f, 0.8999999999999999f, 0.884313725490196f, 0.8686274509803922f, 0.8529411764705883f, 0.8372549019607844f, 0.8215686274509804f, 0.8058823529411765f, 0.7901960784313726f, 0.7745098039215685f, 0.7588235294117647f, 0.7431372549019608f, 0.7274509803921569f, 0.7117647058823531f, 0.696078431372549f, 0.6803921568627451f, 0.6647058823529413f, 0.6490196078431372f, 0.6333333333333333f, 0.6176470588235294f, 0.6019607843137256f, 0.5862745098039217f, 0.5705882352941176f, 0.5549019607843138f, 0.5392156862745099f, 0.5235294117647058f, 0.5078431372549019f, 0.4921568627450981f, 0.4764705882352942f, 0.4607843137254903f, 0.4450980392156865f, 0.4294117647058826f, 0.4137254901960783f, 0.3980392156862744f, 0.3823529411764706f, 0.3666666666666667f, 0.3509803921568628f, 0.335294117647059f, 0.3196078431372551f, 0.3039215686274508f, 0.2882352941176469f, 0.2725490196078431f, 0.2568627450980392f, 0.2411764705882353f, 0.2254901960784315f, 0.2098039215686276f, 0.1941176470588237f, 0.1784313725490199f, 0.1627450980392156f, 0.1470588235294117f, 0.1313725490196078f, 0.115686274509804f, 0.1000000000000001f, 0.08431372549019622f, 0.06862745098039236f, 0.05294117647058805f, 0.03725490196078418f, 0.02156862745098032f, 0.00588235294117645f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

    lut = cv::Mat(256, 1, CV_8UC3);
    for (int i = 0; i<256; i++)
    {
        lut.at<cv::Vec3b>(i) = cv::Vec3b(b[i] * 255, g[i] * 255, r[i]*255);
    }
}

bool XsnDecoder::decode(QString filename, bool saveRawImages)
{


    // create output folder
    QFileInfo fileInfo(filename);
    fileInfo.absoluteDir().mkpath("./" + fileInfo.baseName());
    QDir folder(fileInfo.absolutePath() + "/" + fileInfo.baseName());

    mainFolder = folder.absolutePath();
    basename = fileInfo.baseName();

    // read input file
    buffer = readAllBytes(filename.toStdString().c_str());
    qDebug() << buffer.size();

    // get all indexes of every image
    std::vector<char> str = { -2, -54, -83, -34 };
    founds = findAllIndexes(buffer, str);
    frames = founds.size();
    qDebug() << "founds.size(): " << frames ;

    if (founds.size() < 1) {
        qWarning() << "no images found";
        return false;
    }

    cv::VideoWriter outputVideo;                                        // Open the output


    for(int i=0; i < founds.size(); i++) {

        // grab data and time
        dateTime = extractTime(buffer, founds.at(i));
        qDebug() << QString::number(i) << ") dateTime: " << dateTime.toString("yyyy.MM.dd hh:mm:ss.zzz");
        qint64 msecs = dateTime.toMSecsSinceEpoch();

        // grab image
        cv::Mat image = extractImage(buffer, founds.at(i));


        // visualize in real time and mat for video
        cv::Mat imgShow;
        image.convertTo(imgShow, CV_8UC1, 1.0 / 256.0);
        cv::resize(imgShow, imgShow, cv::Size(imgShow.cols * 10, imgShow.rows * 10));
        cv::cvtColor(imgShow, imgShow, CV_GRAY2BGR);
        cv::medianBlur(imgShow, imgShow, 19);
        cv::LUT(imgShow, lut, imgShow);
        //cv::imshow("Display window", imgShow);
        //cv::waitKey(100); // Wait for a keystroke in the window

        // save to png
        if (saveRawImages) {
            QString timeStr = QString("%1").arg(msecs, 20, 10, QChar('0'));
            QString pngName = basename + "_" + timeStr + ".png";
            std::string globalName = mainFolder.toStdString() + "/" + pngName.toStdString();
            cv::imwrite(globalName, image);
        }

        // create video
        if (!outputVideo.isOpened()) {
            std::string globalName = mainFolder.toStdString() + "/" + basename.toStdString() + ".avi";
            outputVideo.open(globalName, -1, 5, cv::Size(imgShow.cols,imgShow.rows), true);
        }

        outputVideo << imgShow;
    }



    return true;
}

std::vector<char> XsnDecoder::readAllBytes(char const* filename)
{
    std::ifstream ifs(filename, std::ios::binary | std::ios::ate);
    std::ifstream::pos_type pos = ifs.tellg();
    std::vector<char>  result(pos);
    ifs.seekg(0, std::ios::beg);
    ifs.read(&result[0], pos);
    return result;
}

std::vector<std::size_t> XsnDecoder::findAllIndexes(const std::vector<char>& haystack, const std::vector<char>& needle)
{
    std::vector<std::size_t> indexes{};
    std::vector<char>::const_iterator it{ haystack.begin() };
    while ((it = std::search(it, haystack.end(), needle.begin(), needle.end())) != haystack.end())
        indexes.push_back(std::distance(haystack.begin(), it++));
    return indexes;
}

cv::Mat XsnDecoder::extractImage(std::vector<char> &buffer, size_t idx)
{
    // get the size (at byte 12-13 there is the number of bytes occupied
    int size = bytesToU16(buffer, idx+12);
    size = qSqrt(size/2); // 2 bytes for each pixel, our is a 36*36 matrix
    //qDebug() << "size: " << QString::number(size);

    // creation of the mat
    cv::Mat image;
    image = cv::Mat(size, size, CV_16UC1);

    // set each pixel of the mat (data starts after 48 bytes)
    size_t start = idx + 48;
    for (int i = 0; i < size * size; i++) {
        image.at<uint16_t>(i) = bytesToU16(buffer, start + (i * 2));
    }

    return image;
}

QDateTime XsnDecoder::extractTime(std::vector<char> &buffer, size_t idx)
{

    int year = bytesToU16(buffer, idx+16);
    int month = bytesToU16(buffer, idx+18);
    int dayOfWeek = bytesToU16(buffer, idx+20);
    int day = bytesToU16(buffer, idx+22);
    QDate data(year,month, day);

    int hour = bytesToU16(buffer, idx + 24);
    int minute = bytesToU16(buffer, idx + 26);
    int second = bytesToU16(buffer, idx + 28);
    QTime time(hour, minute, second);

    QDateTime dateTime(data, time);

    int millis = bytesToU16(buffer, idx + 30);
    dateTime = dateTime.addMSecs(millis);

    return dateTime;
}

int XsnDecoder::bytesToU16(std::vector<char> &buffer, size_t idx)
{
    return (((unsigned int) ((unsigned char) (buffer.at(idx+1)))) & 255)<<8 | (((unsigned char) buffer.at(idx))&255);
}
